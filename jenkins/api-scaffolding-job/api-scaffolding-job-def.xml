<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPO_URL</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>${REPO_URL}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>apiautomation</authToken>
  <triggers>
    <org.jenkinsci.plugins.gwt.GenericTrigger plugin="generic-webhook-trigger@1.19">
      <spec></spec>
      <genericVariables>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>REPO_URL</key>
          <value>$.repository.url</value>
          <regexpFilter></regexpFilter>
        </org.jenkinsci.plugins.gwt.GenericVariable>
      </genericVariables>
      <regexpFilterText></regexpFilterText>
      <regexpFilterExpression></regexpFilterExpression>
    </org.jenkinsci.plugins.gwt.GenericTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Convert YAML Swagger to JSON Swagger
yaml2json ./api.yaml --pretty &gt; ./api.json
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node
const shell = require(&apos;shelljs&apos;);
const swg = require(&apos;api-scaffolding&apos;);
const fs = require(&apos;fs-extra&apos;);
const path = require(&apos;path&apos;);
const asciify = require(&apos;asciify&apos;);

const spec = fs.readJsonSync(path.resolve(&apos;./api.json&apos;));

// Criando as apis na vers√£o server
shell.echo(swg.createServer(spec, &apos;nodejs-server&apos;));


asciify(&apos;Scaffolding&apos;, {font:&apos;small&apos;}, (err, res) =&gt; {shell.echo(res)});
asciify(&apos;Create APIs&apos;, {font:&apos;standard&apos;, color: &apos;blue&apos;}, (err, res) =&gt; {shell.echo(res)});
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
mv ${WORKSPACE}/nodejs-server-server/* ${WORKSPACE}
rm -rf ${WORKSPACE}/nodejs-server-server
rm -rf ${WORKSPACE}/download
</command>
    </hudson.tasks.Shell>
    <com.cloudbees.dockerpublish.DockerBuilder plugin="docker-build-publish@1.3.2">
      <server plugin="docker-commons@1.8"/>
      <registry plugin="docker-commons@1.8">
        <credentialsId>dockerhub</credentialsId>
      </registry>
      <repoName>rmzoni/${API_NAME}</repoName>
      <noCache>false</noCache>
      <forcePull>true</forcePull>
      <skipBuild>false</skipBuild>
      <skipDecorate>false</skipDecorate>
      <repoTag>v${BUILD_NUMBER}</repoTag>
      <skipPush>false</skipPush>
      <createFingerprint>true</createFingerprint>
      <skipTagLatest>false</skipTagLatest>
      <buildAdditionalArgs></buildAdditionalArgs>
      <forceTag>false</forceTag>
    </com.cloudbees.dockerpublish.DockerBuilder>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <EnvInjectBuildWrapper plugin="envinject@2.1.3">
      <info>
        <secureGroovyScript plugin="script-security@1.34">
          <script>import hudson.model.*

// Represents the current Build of Job Jenkins
def build = Thread.currentThread().executable
def gitUrl = build.environment.get(&quot;REPO_URL&quot;)


return [
    /*
        Git Hub URL has this pattern:
            - https://&lt;dns&gt;/&lt;user or organization&gt;/&lt;repo name&gt;/&lt;option tree&gt;/&lt;optional branch or tag&gt;
            - The API name is the repo name
    */ 
    API_NAME: gitUrl.tokenize(&apos;/&apos;)[3],
    NODE_PATH: &quot;/usr/local/lib/node_modules&quot;
];</script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>